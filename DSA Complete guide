<!DOCTYPE HTML>
<html>
<head>
<title>DSA WEBSITE</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"/>
<link rel="stylesheet" href="style.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
<style>
h1{
border-width:0px 0px 2px 0px;
border-style:solid;
border-color:red;
font-size:30px;
}

@media only screen and (max-width:720px){
img,div{
width:100%;
height:100%;
}
</style>
</head>
<body> 
<h1>Best Resources For Data Structures </h1>
Are you confused from where to learn dsa and are you unable to choose good resources???In this website we are providing the best resources collected from various websites for dsa topic wise and also with the questions to practice.</br>
<h3>What is Data Structure?</h3>
  Before defining data structures, let’s back up a little and ask, “What is data?” Here’s a quick answer: Data is information optimized for processing and movement, facts and figures stored on computers.</br>
Data structures are a specific way of organizing data in a specialized format on a computer so that the information can be organized, processed, stored, and retrieved quickly and effectively. They are a means of handling information, rendering the data for easy use.
Every application, piece of software, or programs foundation consists of two components: algorithms and data. Data is information, and algorithms are rules and instructions that turn the data into something useful to programming.</br>Put another way, remember these two simple equations:</br>
Related data + Permissible operations on the data = Data Structures</br>
Data structures + Algorithms = Programs</br></br>
     This page provides some of the best resources for different data structures (DS) with topic-wise problems.</br>
<b>For documentation geeks for geeks and javatpoint are best.
The links for the documentation are -</b>
<ul>
<li><a href="https://www.geeksforgeeks.org/data-structures/?ref=shm">Geeks for Geeks</a></li>
<li><a href="https://www.javatpoint.com/data-structure-tutorial">Javatpoint</a></li>
</ul>



<div id="one">
<h2>1.Arrays</h2>
The very first and basic topic of DSA.</br>
<h3>What is Array in Data Structure?</h3>
An array is a linear data structure for storing more than one data item that has a similar data type. The items of an array are allocated at adjacent memory locations. These memory locations are called elements of that array. The total number of elements in an array is called length.
The details of an array are accessed about its position. This reference is called index or subscript.The main advantage of an array over any other data structure is any location can be accessed in constant time in an array which makes it so useful in the design of other data structures. So an array is used as a basic building block in many data structures. </br> </br>
<center><img src="C:\Users\Admin\Downloads\Array.jpeg" alt="Arrays" width="600" height="300"></center></br>
<h3>Applications of an array:</h3>
Apart from being widely used in programming, arrays have additional applications as well:</br>
1. Used in mathematical problems like matrices etc.</br>
2. They are used in the implementation of other data structures like linked lists etc.</br>
3. Database records are usually implemented as arrays.</br>
<h3>YouTube resources for Array-</h3>
<ol>
<li><a href="https://youtu.be/n60Dn0UsbEk">Introduction to Arrays and ArrayList</a></li>
<li><a href="https://youtu.be/p5TDnxAYAZY">Operations on Arrays in Data Structures: Traversal, Insertion, Deletion and Searching</a></li>
<li><a href="https://youtube.com/playlist?list=PLqM7alHXFySEQDk2MDfbwEdjd2svVJH9p">Geeks for Geeks problem solutions</a></li>
<li><a href="https://youtube.com/playlist?list=PLDdcY4olLQk3zG-972eMoDJHLIz3FiGA6">Problems from Love Babbar DSA sheet</a></li>
<li><a href="https://youtube.com/playlist?list=PLt4nG7RVVk1huDVqwMojFsxlz9AXYmKKo">Array problems with implementation in java</a></li>
</ol>
<h2>Here are the links for the problems to practice:</h2>
<h3>Bare-minimum problems:</h3>
<ul><li><a href="https://www.geeksforgeeks.org/top-50-array-coding-problems-for-interviews">Top 50 array coding problems for interviews</a></li></ul>
<h3>Bonus problems:</h3>
<ul>
<li><a href="https://www.interviewbit.com/courses/programming/topics/arrays/">Array problems on Interviewbit</a></br></li>
<li><a href="https://leetcode.com/tag/array/">Array problems on leetcode</a></li>
</ul>
</div>



<div id="two">
<h2>2.Strings</h2>
<h3>What is String?</h3>
Strings are defined as an array of characters.Strings in C are stored as null character, '', terminated character arrays.
This means that the length of a string is the number of characters it contains one more to store the null character.
Common string operations include finding lengths, copying, searching, replacing and counting the occurrences of specific characters and worlds.</br>
<center><img src="C:\Users\Admin\Downloads\string.jpeg" alt="Strings" width="600" height="300"></center></br>
<h3>Basic Concepts</h3>
<ol>
<li>int length(): Returns the number of characters in the String</li>
<li>char charAt(int i): Returns the character at i index</li>
<li>String substring (int i): Return the substring from the ith index character to end.</li>
<li>String substring (int i, int j): Returns the substring from i to j-1 index.</li>
<li>String concat( String str): Concatenates specified string to the end of this string.</li>
<li>int indexOf (String s): Returns the index within the string of the first occurrence of the specified string.</li>
<li>int compareTo(String anotherString): Compares two string lexicographically.</li>
<li>String toLowerCase(): Converts all the characters in the String to lower case.</li>
</ol>
<h3>YouTube resources for Strings-</h3>
<ul>
<li><a href="https://youtu.be/zL1DPZ0Ovlo">Strings and StringBuilder in Java</a></li>
<li><a href="https://youtu.be/vCRD36bG8xQ">Strings by Apna College</a></li>
<li><a href="https://youtube.com/playlist?list=PLt4nG7RVVk1gp0v3wg7gWB26lRzseuHQz">String problems with solution</a></li>
</ul>
<h2>Problems to Practice-</h2>
<h3>Bare-minimum:</h3>
<ul><li><a href="https://www.interviewbit.com/courses/programming/topics/strings/">String problems on interviewbit</a></li></ul>
<h3>Bonus problems:</h3>
<ul>
<li><a href="https://leetcode.com/tag/string/">String problems on leetcode</a></li>
<li><a href="https://www.hackerrank.com/domains/algorithms?filters%5Bstatus%5D%5B%5D=unsolved&filters%5Bsubdomains%5D%5B%5D=strings&badge_type=problem-solving"> String problems on Hackerrank</a></li>
</ul>
</div>


<div id="three">
<h2>3.LinkedLists</h2>
<h3>What is LinkedList in Data Structure?</h3>
A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers., a linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list.</br>
<center><img src="C:\Users\Admin\Downloads\linkedlist.jpeg" alt="LinkedList" width="600" height="300"></center></br>
<h3>Types of Linked Lists</h3>
There are 3 different implementations of Linked List available, they are:
<ol>
<li>Singly Linked List</li>
<li>Doubly Linked List</li>
<li>Circular Linked List</li>
</ol>
Let's know more about them and how they are different from each other.</br>
<h3>Singly Linked List</h3>
Singly linked lists contain nodes which have a data part as well as an address part i.e. next, which points to the next node in the sequence of nodes.The operations we can perform on singly linked lists are insertion, deletion and traversal.
<h3>Doubly Linked List</h3>
In a doubly linked list, each node contains a data part and two addresses, one for the previous node and one for the next node.
<h3>Circular Linked List</h3>
In circular linked list the last node of the list holds the address of the first node hence forming a circular chain.
<h3>YouTube resources for Linked Lists-</h3>
<ul>
<li><a href="https://youtu.be/WZFYgcalA0k">Singly Linked List - Insertion(Beginning ,End, Specific Position)(For My Scholars)</a></li>
<li><a href="https://youtu.be/58YbpRDc4yw">Linked List - Singly + Doubly + Circular (Theory + Code + Implementation)</a></li>
<li><a href="https://youtu.be/oAja8-Ulz6o">LinkedList in one video</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLKZaSt2df1gz775Mz-2gLpY9sld5wH8We">Linkedlist problem solutions</a></li>
<li><a href="https://youtube.com/playlist?list=PLgUwDviBIf0r47RKH7fdWN54AbWFgGuii">Placement series</a></li>
</ul>
<h2>Problems to Practice-</h2>
<h3>Bare-minimum:</h3>
<ul><li><a href="https://www.interviewbit.com/courses/programming/topics/linked-lists/">LinkedLists problems on interviewbit</a></li></ul>
<h3>Bonus problems:</h3>
<ul>
<li><a href="https://leetcode.com/tag/linked-list/">Linkedlist problems on Leetcode</a></li>
<li><a href="https://www.geeksforgeeks.org/top-20-linked-list-interview-question/">Top 20 linkedlist interview questions</a></li>
</ul>
</div>


<div id="four">
<h2>4.Stacks</h2>
<h3>What is Stack in Data Structure?</h3>
A stack is a linear data structure, that follows Last In First Out(LIFO) principle or First In Last Out(FILO) principle in which the operations are performed.</br>
<center><img src="C:\Users\Admin\Downloads\Stack.jpeg" alt="Stack" width="600" height="300"></center></br>
Mainly the following  basic operations are performed in the stack:</br>
1.Push: Adds an item in the stack. If the stack is full, then it is said to be an Overflow condition.</br>
2.Pop: Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.</br>
3.Peek or Top: Returns the top element of the stack.</br>
Display:To display the elements present in the stack.</br>
<h3>Applications of stack:</h3>
<ol>
<li>Expression Evaluation</li>
<li>Expression Conversion<br>
    i. Infix to Postfix<br>
    ii. Infix to Prefix<br>
    iii. Postfix to Infix<br>
    iv. Prefix to Infix</li>
<li>Backtracking</li>
<li>Memory Management</li>
</ol>
<h3>YouTube resources for Stacks-</h3>
<ol>
<li><a href="https://youtu.be/51xMqsWyDK8">Introduction to Stack & its Operations -Push Pop | Applications of Stack </a></li>
<li><a href="https://youtu.be/rHQI4mrJ3cg">Stacks and Queues complete tutorial</a></li>
<li><a href="https://youtu.be/7m1DMYAbdiY">Stack in One Video</a></li>
<li><a href="https://youtu.be/_abDDg0Jw94">Infix to Postfix</a></li>
<li><a href="https://youtube.com/playlist?list=PL_z_8CaSLPWdeOezg68SKkeLN4-T_jNHd">Stack interview questions</a></li>
</ol>
<h2>Here are the links for the problems to practice:-</h2>
<h3>Bare-minimum:</h3>
<ul>
<li><a href="https://www.interviewbit.com/courses/programming/topics/stacks-and-queues/">Stacks and Queues problems on interviewbit</a></li>
</ul>
<h3>Bonus problems:</h3>
<ul>
<li><a href="https://leetcode.com/tag/stack/">Leetcode Practice problems</a></li>
<li><a href="https://www.geeksforgeeks.org/java-program-to-implement-linkedlist-api/">Geeks for Geeks stack problems</a></li>
</ul>
</div>
